// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: todo.sql

package db

import (
	"context"
	"database/sql"
)

const clearTodo = `-- name: ClearTodo :exec
TRUNCATE TABLE Todo
`

func (q *Queries) ClearTodo(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearTodo)
	return err
}

const countTodo = `-- name: CountTodo :one
SELECT count(*) FROM Todo
`

func (q *Queries) CountTodo(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTodo)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTodo = `-- name: CreateTodo :execresult
INSERT INTO Todo (
  title, description
) VALUES (
  ?, ?
)
`

type CreateTodoParams struct {
	Title       sql.NullString `json:"title"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTodo, arg.Title, arg.Description)
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM Todo
WHERE id = ?
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const deleteTodoList = `-- name: DeleteTodoList :exec
DELETE FROM Todo
WHERE FIND_IN_SET(id, ?)
`

func (q *Queries) DeleteTodoList(ctx context.Context, ids string) error {
	_, err := q.db.ExecContext(ctx, deleteTodoList, ids)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, title, description, create_date, update_date FROM Todo
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreateDate,
		&i.UpdateDate,
	)
	return i, err
}

const listTodo = `-- name: ListTodo :many
SELECT id, title, description, create_date, update_date FROM Todo
ORDER BY id
LIMIT ?, ?
`

type ListTodoParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListTodo(ctx context.Context, arg ListTodoParams) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodo, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreateDate,
			&i.UpdateDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :exec
UPDATE Todo SET description = ?
WHERE id = ?
`

type UpdateTodoParams struct {
	Description sql.NullString `json:"description"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.ExecContext(ctx, updateTodo, arg.Description, arg.ID)
	return err
}
