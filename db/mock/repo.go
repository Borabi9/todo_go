// Code generated by MockGen. DO NOT EDIT.
// Source: first-app/todo_go/db/sqlc (interfaces: Repo)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	db "first-app/todo_go/db/sqlc"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// ClearTodo mocks base method.
func (m *MockRepo) ClearTodo(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearTodo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearTodo indicates an expected call of ClearTodo.
func (mr *MockRepoMockRecorder) ClearTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearTodo", reflect.TypeOf((*MockRepo)(nil).ClearTodo), arg0)
}

// CountTodo mocks base method.
func (m *MockRepo) CountTodo(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTodo", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTodo indicates an expected call of CountTodo.
func (mr *MockRepoMockRecorder) CountTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTodo", reflect.TypeOf((*MockRepo)(nil).CountTodo), arg0)
}

// CreateTodo mocks base method.
func (m *MockRepo) CreateTodo(arg0 context.Context, arg1 db.CreateTodoParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockRepoMockRecorder) CreateTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockRepo)(nil).CreateTodo), arg0, arg1)
}

// DeleteTodo mocks base method.
func (m *MockRepo) DeleteTodo(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockRepoMockRecorder) DeleteTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockRepo)(nil).DeleteTodo), arg0, arg1)
}

// DeleteTodoList mocks base method.
func (m *MockRepo) DeleteTodoList(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodoList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodoList indicates an expected call of DeleteTodoList.
func (mr *MockRepoMockRecorder) DeleteTodoList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodoList", reflect.TypeOf((*MockRepo)(nil).DeleteTodoList), arg0, arg1)
}

// GetTodo mocks base method.
func (m *MockRepo) GetTodo(arg0 context.Context, arg1 int64) (db.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodo", arg0, arg1)
	ret0, _ := ret[0].(db.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodo indicates an expected call of GetTodo.
func (mr *MockRepoMockRecorder) GetTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockRepo)(nil).GetTodo), arg0, arg1)
}

// ListTodo mocks base method.
func (m *MockRepo) ListTodo(arg0 context.Context, arg1 db.ListTodoParams) ([]db.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTodo", arg0, arg1)
	ret0, _ := ret[0].([]db.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTodo indicates an expected call of ListTodo.
func (mr *MockRepoMockRecorder) ListTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTodo", reflect.TypeOf((*MockRepo)(nil).ListTodo), arg0, arg1)
}

// UpdateTodo mocks base method.
func (m *MockRepo) UpdateTodo(arg0 context.Context, arg1 db.UpdateTodoParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockRepoMockRecorder) UpdateTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockRepo)(nil).UpdateTodo), arg0, arg1)
}
